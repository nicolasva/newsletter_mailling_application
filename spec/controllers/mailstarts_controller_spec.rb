require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MailstartsController do

  # This should return the minimal set of attributes required to create a valid
  # Mailstart. As you add validations to Mailstart, be sure to
  # update the return value of this method accordingly.
  #def valid_attributes
  #  {}
  #end
 
  before(:each) do 
  	#@request.env["devise.mapping"] = Devise.mappings[:user]
	#user = Factory.create(:user)
	#user.confirm!
	#sign_in user
      	@mailstart = Factory.create(:mailstart)
	login_user
  end

  describe "#create" do
  	it "new" do
	    expect {
	       post :new
	    }
	end
  end

  describe "#destroy" do
      it "redirects back after destroy" do
      	delete :destroy, :id => @mailstart.id
	response.should be_redirect
      end
  end

  describe "#edit" do
      it "edit mailstart" do
      	  get 'edit', :id => @mailstart.id
	  response.status.should == 302
      end
  end
end
